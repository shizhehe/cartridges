





















































































































































GitHub - ROCm/composable_kernel: Composable Kernel: Performance Portable Programming Model for Machine Learning Tensor Operators
































































































Skip to content




























Navigation Menu




Toggle navigation










 



























            Sign in
          






 






Appearance settings























        Product
        





























            GitHub Copilot
          

        Write better code with AI
      

















            GitHub Models
              

                New
              



        Manage and compare prompts
      

















            GitHub Advanced Security
          

        Find and fix vulnerabilities
      

















            Actions
          

        Automate any workflow
      

















            Codespaces
          

        Instant dev environments
      





























            Issues
          

        Plan and track work
      

















            Code Review
          

        Manage code changes
      

















            Discussions
          

        Collaborate outside of code
      

















            Code Search
          

        Find more, search less
      














Explore







      Why GitHub

    






      All features

    






      Documentation

    











      GitHub Skills

    











      Blog

    





















        Solutions
        














By company size







      Enterprises

    






      Small and medium teams

    






      Startups

    






      Nonprofits

    









By use case







      DevSecOps

    






      DevOps

    






      CI/CD

    






      View all use cases

    













By industry







      Healthcare

    






      Financial services

    






      Manufacturing

    






      Government

    






      View all industries

    












              View all solutions
              






 









        Resources
        














Topics







      AI

    






      DevOps

    






      Security

    






      Software Development

    






      View all

    













Explore







      Learning Pathways

    











      Events & Webinars

    











      Ebooks & Whitepapers

    






      Customer Stories

    






      Partners

    











      Executive Insights

    
















        Open Source
        























            GitHub Sponsors
          

        Fund open source developers
      



















            The ReadME Project
          

        GitHub community articles
      










Repositories







      Topics

    






      Trending

    






      Collections

    
















        Enterprise
        





























            Enterprise platform
          

        AI-powered developer platform
      










Available add-ons

















            GitHub Advanced Security
          

        Enterprise-grade security features
      

















            Copilot for business
          

        Enterprise-grade AI features
      

















            Premium Support
          

        Enterprise-grade 24/7 support
      
















Pricing


























Search or jump to...
















Search code, repositories, users, issues, pull requests...




 









        Search
      




























Clear


 


































































































 








Search syntax tips
 





























        Provide feedback
      




















 


We read every piece of feedback, and take your input very seriously.






Include my email address so I can be contacted






 
    Cancel



    Submit feedback




















        Saved searches
      


Use saved searches to filter your results more quickly




















 












Name














Query







            To see all available qualifiers, see our 
documentation
.
          


 












 
    Cancel



    Create saved search
















                Sign in
              





                Sign up
              






 






Appearance settings








Resetting focus




















You signed in with another tab or window. 
Reload
 to refresh your session.


You signed out in another tab or window. 
Reload
 to refresh your session.


You switched accounts on another tab or window. 
Reload
 to refresh your session.


 






Dismiss alert





































        ROCm

 


/




composable_kernel




Public












 




Notifications

 
You must be signed in to change notification settings






 




Fork
    
199










 





          Star

 
427

















        Composable Kernel: Performance Portable Programming Model for Machine Learning Tensor Operators
      












rocm.docs.amd.com/projects/composable_kernel/en/latest/






License











     View license
    














427

          stars

 








199

          forks

 








Branches


 








Tags


 








Activity


 








 





          Star









 




Notifications

 
You must be signed in to change notification settings




























Code
















Issues


34














Pull requests


88














Discussions
















Actions
















Projects


0














Wiki
















Security












        Uh oh!



 
There was an error while loading. 
Please reload this page
.




 


 
















Insights








 




 






Additional navigation options






 





















          Code






















          Issues






















          Pull requests






















          Discussions






















          Actions






















          Projects






















          Wiki






















          Security






















          Insights













 












ROCm/composable_kernel








 






















 
 
 
 
develop
Branches
Tags
Go to file
Code
Open more actions menu
Folders and files
Name
Name
Last commit message
Last commit date
Latest commit
 
History
2,024 Commits
.azuredevops
.azuredevops
 
 
.github
.github
 
 
client_example
client_example
 
 
cmake
cmake
 
 
codegen
codegen
 
 
docs
docs
 
 
example
example
 
 
include
include
 
 
library
library
 
 
profiler
profiler
 
 
python
python
 
 
script
script
 
 
test
test
 
 
tile_engine
tile_engine
 
 
.clang-format
.clang-format
 
 
.clang-tidy
.clang-tidy
 
 
.gitignore
.gitignore
 
 
.pre-commit-config.yaml
.pre-commit-config.yaml
 
 
.readthedocs.yaml
.readthedocs.yaml
 
 
CHANGELOG.md
CHANGELOG.md
 
 
CITATION.cff
CITATION.cff
 
 
CMakeLists.txt
CMakeLists.txt
 
 
CONTRIBUTORS.md
CONTRIBUTORS.md
 
 
Config.cmake.in
Config.cmake.in
 
 
Dockerfile
Dockerfile
 
 
Dockerfile.compiler
Dockerfile.compiler
 
 
Jenkinsfile
Jenkinsfile
 
 
LICENSE
LICENSE
 
 
README.md
README.md
 
 
TERMINOLOGY.md
TERMINOLOGY.md
 
 
dev-requirements.txt
dev-requirements.txt
 
 
pyproject.toml
pyproject.toml
 
 
rbuild.ini
rbuild.ini
 
 
requirements.txt
requirements.txt
 
 
View all files
Repository files navigation
README
License
Composable Kernel


Note
The published documentation is available at 
Composable Kernel
 in an organized, easy-to-read format, with search and a table of contents. The documentation source files reside in the 
docs
 folder of this repository. As with all ROCm projects, the documentation is open source. For more information on contributing to the documentation, see 
Contribute to ROCm documentation
.




The Composable Kernel (CK) library provides a programming model for writing performance-critical
kernels for machine learning workloads across multiple architectures (GPUs, CPUs, etc.). The CK library
uses general purpose kernel languages, such as HIP C++.


CK uses two concepts to achieve performance portability and code maintainability:




A tile-based programming model


Algorithm complexity reduction for complex machine learning (ML) operators. This uses an innovative
technique called 
Tensor Coordinate Transformation
.






The current CK library is structured into four layers:




Templated Tile Operators


Templated Kernel and Invoker


Instantiated Kernel and Invoker


Client API






General information




CK supported operations


CK Tile supported operations


CK wrapper


CK codegen


CK profiler


Examples (Custom use of CK supported operations)


Client examples (Use of CK supported operations with instance factory)


Terminology


Contributors




CK is released under the 
MIT license
.


Building CK


We recommend building CK inside Docker containers, which include all necessary packages. Pre-built
Docker images are available on 
DockerHub
.






To build a new Docker image, use the Dockerfile provided with the source code:


DOCKER_BUILDKIT=1 docker build -t ck:latest -f Dockerfile 
.






Launch the Docker container:


docker run                                     \
-it                                            \
--privileged                                   \
--group-add sudo                               \
-w /root/workspace                             \
-v 
${PATH_TO_LOCAL_WORKSPACE}
:/root/workspace  \
ck:latest                                      \
/bin/bash






Clone CK source code from the GitHub repository and start the build:


git clone https://github.com/ROCm/composable_kernel.git 
&&
 \

cd
 composable_kernel 
&&
 \
mkdir build 
&&
 \

cd
 build


You must set the 
GPU_TARGETS
 macro to specify the GPU target architecture(s) you want
to run CK on. You can specify single or multiple architectures. If you specify multiple architectures,
use a semicolon between each; for example, 
gfx908;gfx90a;gfx942
.


cmake                                                                                             \
-D CMAKE_PREFIX_PATH=/opt/rocm                                                                    \
-D CMAKE_CXX_COMPILER=/opt/rocm/bin/hipcc                                                         \
-D CMAKE_BUILD_TYPE=Release                                                                       \
-D GPU_TARGETS=
"
gfx908;gfx90a
"
                                                                    \
..


If you don't set 
GPU_TARGETS
 on the cmake command line, CK is built for all GPU targets
supported by the current compiler (this may take a long time).
Tests and examples will only get built if the GPU_TARGETS is set by the user on the cmake command line.


NOTE: If you try setting 
GPU_TARGETS
 to a list of architectures, the build will only work if the
architectures are similar, e.g., 
gfx908;gfx90a
, or 
gfx1100;gfx1101;gfx11012
. Otherwise, if you
want to build the library for a list of different architectures,
you should use the 
GPU_ARCHS
 build argument, for example 
GPU_ARCHS=gfx908;gfx1030;gfx1100;gfx942
.






Build the entire CK library:


make -j






Install CK:


make -j install


See Note on -j






Optional post-install steps






Build examples and tests:


make -j examples tests






Build and run all examples and tests:


make -j check


You can find instructions for running each individual example in 
example
.






Build and run smoke/regression examples and tests:


make -j smoke 
#
 tests and examples that run for < 30 seconds each


make -j regression 
#
 tests and examples that run for >= 30 seconds each






Build ckProfiler:


make -j ckProfiler


You can find instructions for running ckProfiler in 
profiler
.






Build our documentation locally:


cd
 docs
pip3 install -r sphinx/requirements.txt
python3 -m sphinx -T -E -b html -d _build/doctrees -D language=en 
.
 _build/html






Notes


The 
-j
 option for building with multiple threads in parallel, which speeds up the build significantly.
However, 
-j
 launches unlimited number of threads, which can cause the build to run out of memory and
crash. On average, you should expect each thread to use ~2Gb of RAM.
Depending on the number of CPU cores and the amount of RAM on your system, you may want to
limit the number of threads. For example, if you have a 128-core CPU and 128 Gb of RAM it's advisable to use 
-j32
.


Additional cmake flags can be used to significantly speed-up the build:






DTYPES
 (default is not set) can be set to any subset of "fp64;fp32;fp16;fp8;bf16;int8" to build
instances of select data types only. The main default data types are fp32 and fp16; you can safely skip
other data types.






DISABLE_DL_KERNELS
 (default is OFF) must be set to ON in order not to build instances, such as 
gemm_dl
 or

batched_gemm_multi_d_dl
. These instances are useful on architectures like the NAVI2x, as most
other platforms have faster instances, such as 
xdl
 or 
wmma
, available.






DISABLE_DPP_KERNELS
 (default is OFF) must be set to ON in order not to build instances, such as 
gemm_dpp
.
These instances offer a slightly better performance of fp16 gemms on NAVI2x. But on other architectures faster alternatives are available.






CK_USE_FP8_ON_UNSUPPORTED_ARCH
 (default is OFF) must be set to ON in order to build instances,
such as 
gemm_universal
, 
gemm_universal_streamk
 and 
gemm_multiply_multiply
 for fp8 data type for GPU targets which do not  have native support for fp8 data type, such as gfx908 or gfx90a. These instances are useful on
architectures like the MI100/MI200 for the functional support only.






Using sccache for building


The default CK Docker images come with a pre-installed version of sccache, which supports clang
being used as hip-compiler (" -x hip"). Using sccache can help reduce the time to re-build code from
hours to 1-2 minutes. In order to invoke sccache, you need to run:


 sccache --start-server


then add the following flags to the cmake command line:


 -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache


You may need to clean up the build folder and repeat the cmake and make steps in order to take
advantage of the sccache during subsequent builds.


Using CK as pre-built kernel library


You can find instructions for using CK as a pre-built kernel library in 
client_example
.


Contributing to CK


When you contribute to CK, make sure you run 
clang-format
 on all changed files. We highly
recommend using git hooks that are managed by the 
pre-commit
 framework. To install hooks, run:


sudo script/install_precommit.sh


With this approach, 
pre-commit
 adds the appropriate hooks to your local repository and
automatically runs 
clang-format
 (and possibly additional checks) before any commit is created.


If you need to uninstall hooks from the repository, you can do so by running the following command:


script/uninstall_precommit.sh


If you need to temporarily disable pre-commit hooks, you can add the 
--no-verify
 option to the

git commit
 command.


 
 
 


















About



        Composable Kernel: Performance Portable Programming Model for Machine Learning Tensor Operators
      












rocm.docs.amd.com/projects/composable_kernel/en/latest/






Resources











        Readme

 


License











     View license
    














        Uh oh!



 
There was an error while loading. 
Please reload this page
.




 


 












Activity
 










Custom properties
 


Stars










427

      stars
 


Watchers










26

      watching
 


Forks










199

      forks
 





          Report repository

 














Releases
      
18














rocm-6.4.1



          Latest

 


May 20, 2025




 


+ 17 releases












Packages
      
0



        No packages published 






















        Uh oh!



 
There was an error while loading. 
Please reload this page
.




 


 














Contributors
      
131




































































































        Uh oh!



 
There was an error while loading. 
Please reload this page
.




 


 






+ 117 contributors










Languages
































C++


95.8%
















NASL


1.3%
















CMake


1.3%
















Python


1.0%
















Shell


0.3%
















Pawn


0.3%
































Footer

















        © 2025 GitHub, Inc.
      






Footer navigation






Terms






Privacy






Security






Status






Docs






Contact









       Manage cookies
    











      Do not share my personal information
    

































    You can’t perform that action at this time.
  

























